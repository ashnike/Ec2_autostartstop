import boto3
import json
import http.client
from urllib.parse import urlparse

# Initialize SNS client and specify the topic ARN
sns_client = boto3.client('sns')
sns_topic_arn = '<your_sns_topic_arn>'

# Define Slack webhook URL
slack_webhook_url = '<your_slack_webhook_url>

def stop_ec2_instances():
    # Create EC2 client
    ec2 = boto3.client('ec2')
    
    # Get instances with specific tags
    instances = ec2.describe_instances(Filters=[
        {'Name': 'tag:ProjectName', 'Values': ['autostartstop']}
    ])
    
    instance_list = []
    # Stop instances
    for reservation in instances['Reservations']:
        for instance in reservation['Instances']:
            instance_id = instance['InstanceId']
            instance_name = [tag['Value'] for tag in instance['Tags'] if tag['Key'] == 'Name'][0]
            instance_state = instance['State']['Name']
            if instance_state == 'stopped':
                instance_list.append(f"{instance_name} ({instance_id}) (Not stopped - Already stopped)")
            else:
                ec2.stop_instances(InstanceIds=[instance_id])
                instance_list.append(f"{instance_name} ({instance_id})")
                print(f'Stopping instance: {instance_id}')
    
    return instance_list

def lambda_handler(event, context):
    try:
        # Stop EC2 instances
        instance_list = stop_ec2_instances()
        
        if not instance_list:
            print("No instances to stop.")
            return
        
        # Create message
        message = "\n".join([f"{index+1}) {instance}" for index, instance in enumerate(instance_list)])
        message += " have been stopped successfully."
        
        # Publish message to SNS topic
        try:
            sns_client.publish(TopicArn=sns_topic_arn, Message=message)
        except sns_client.exceptions.InvalidParameterException:
            print("SNS topic ARN not found.")
        
        # Send message to Slack channel
        try:
            headers = {'Content-Type': 'application/json'}
            payload = {'text': message}
            parsed_url = urlparse(slack_webhook_url)
            conn = http.client.HTTPSConnection(parsed_url.hostname)
            conn.request('POST', parsed_url.path, json.dumps(payload), headers)  # Send POST request
            response = conn.getresponse()
            print(response.read().decode())
            conn.close()
        except Exception as e:
            print(f"Error sending message to Slack: {str(e)}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")
